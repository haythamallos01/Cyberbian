@page "/register"
@using System.Net
@using CyberbianSite.Client.Authentication
@using CyberbianSite.Shared
@inject HttpClient httpClient
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<PageTitle>Register</PageTitle>
<div class="rs-features bg1 pt-126 md-pt-71 md-pb-75">
    <div class="container relative">
        <h3>Register</h3>

        <EditForm Model="user" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator/>
            <div class="mb-3">
                <label for="firstName">First Name</label>
                <InputText id="firstName" @bind-Value="user.FirstName" class="form-control" />
                <ValidationMessage For="@(() => user.FirstName)" />
            </div>
            <div class="mb-3">
                <label for="lastName">Last Name</label>
                <InputText id="lastName" @bind-Value="user.LastName" class="form-control" />
                <ValidationMessage For="@(() => user.LastName)" />
            </div>
            <div class="mb-3">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="user.Email" class="form-control" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div class="mb-3">
                <label for="password">Password</label>
                <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>
            <div class="mb-3">
                <label for="confirmPassword">Confirm Password</label>
                <InputText id="confirmPaswword" @bind-Value="user.ConfirmPassword" class="form-control" type="password" />
                <ValidationMessage For="@(() => user.ConfirmPassword)" />

            </div>
            <button type="submit" class="btn btn-primary">Register</button>
            <div class="mb-3">
                <label>@errorMsg</label>
            </div>

        </EditForm>
    </div>
</div>

@code {
    UserRegister user = new UserRegister();
    private string? errorMsg = string.Empty;
    private async Task HandleRegistration()
    {
        //Console.WriteLine($"Register User with the Email {user.Email}");
        var registerResponse = await httpClient.PostAsJsonAsync<UserRegister>("/api/Account/Register", user);
        if (registerResponse.IsSuccessStatusCode)
        {
            var userSession = await registerResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            //navManager.NavigateTo("/dashboard", true);
            navManager.NavigateTo("/", true);
        }
        else if (registerResponse.StatusCode == HttpStatusCode.Unauthorized)
        {
            errorMsg = "Could not create account.  Email already in use.";
            StateHasChanged();
        }
    }
}
