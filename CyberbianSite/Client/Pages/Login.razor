@page "/login"
@using System.Net
@using CyberbianSite.Client.Authentication
@using CyberbianSite.Shared
@inject HttpClient httpClient
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="rs-features bg1 pt-126 md-pt-71 md-pb-75">
    <div class="container relative">
        <EditForm Model="loginRequest" OnValidSubmit="Authenticate">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center">
                <h4>Please sign-in with your account</h4>
            </div>

            <div class="mb-3">
                <label for="username">Email</label>
                <InputText id="username" @bind-Value="loginRequest.UserName" class="form-control" />
                <ValidationMessage For="@(() => loginRequest.UserName)" />
            </div>
            <div class="mb-3">
                <label for="password">Password</label>
                <InputText id="password" @bind-Value="loginRequest.Password" class="form-control" type="password" />
                <ValidationMessage For="@(() => loginRequest.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
            <div class="mb-3">
                <label>@errorMsg</label>
            </div>
        </EditForm>

    </div>
</div>


@code {
    private LoginRequest loginRequest = new LoginRequest();
    private string? errorMsg = string.Empty;
    private async Task Authenticate()
    {
        var loginResponse = await httpClient.PostAsJsonAsync<LoginRequest>("/api/Account/Login", loginRequest);

        if (loginResponse.IsSuccessStatusCode)
        {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            navManager.NavigateTo("/dashboard", true);
        }
        else if (loginResponse.StatusCode == HttpStatusCode.Unauthorized)
        {
            errorMsg = "Invalid User Name or Password";
            StateHasChanged();
            //await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            //return;
        }
    }
}
